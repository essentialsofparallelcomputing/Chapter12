
# Download VirtualBox and install

# Download Ubuntu desktop install and save on local disk [ubuntu-18.04.2-desktop-amd64.iso]

# Setup new machine

# Click on New

# Type in a name [chapter12]
# Select Linux and Ubuntu 64-bit

# Select the amount of memory [8192]

# Create a virtual hard disk now
# Select VDI VirtualBox Disk Image

# Select Fixed Size Disk
# Select 50 GB

# Should see the new virtual machine added to the list

# Start Ubuntu virtual machine (Green arrow, start)

# Select iso file saved earlier [ubuntu-18.04.2-desktop-amd64.iso]

# Switch to Scaled View. It is under View menu or use Right-Command C to switch back and forth
# Once the guest additions is installed, you can set a higher resolution display with the
#   view menu pull-down at the top menu bar
# Main menu bar is hidden (access it by right command home (left command))

# Select Install Ubuntu

# Keyboard -- continue

# Select minimal, download updates while installing and install third-party

# Select Erase disk and install Ubuntu
# Select Install Now

# Select timezone

# Your name [chapter12]
# Your computer's name [chapter12-virtualbox]
# Username [chapter12]
# password [chapter12]
# Select "Require my password to log in"

# Select continue

# Long time ....

# Installation is complete, Restart computer

# sign in

# click through whats new

# select dots at bottom left and terminal

# sudo apt install git


# git clone https://github.com/essentialsofparallelcomputing/Chapter12.git

# Run the virtual box script
# Chapter12/README.virtualbox

# ====
sudo apt-get update

sudo apt install build-essential dkms -y
sudo apt-get install virtualbox-guest-additions-iso -y

# if does not automatically run, go to file manager and click on the CD. Choose Open Autorun Prompt

# Make virtualbox window active and select devices from window menus at top of screen
#     Shared Clipboard --> bidirectional
#     Drag and Drop --> bidirectional
#     Install guest additions (under devices pull-down
#     Remove optical disk -- from desktop, right click and eject or from devices-->optical disk-->remove disk from virtual drive
#     reboot and test copy paste
# Copy on Mac is command-C and paste in Ubuntu is shift-ctrl-v

# CUDA
 
#wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
#sudo dpkg -i cuda-repo-ubuntu1804_10.2.89-1_amd64.deb
#sudo apt-key add /var/cuda-repo-10.2.89-1_amd64/7fa2af90.pub
#sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af90.pub
#sudo apt-get update
#sudo apt-get install cuda

# Set your environment up in your .bash_profile
#export PATH=/usr/local/cuda-10.2/bin:/usr/local/cuda-10.2/NsightCompute-2019.1:${PATH}
#export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64\
#                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}

# OpenCL packages

#sudo apt install clinfo ocl-icd-libopencl1 ocl-icd


pushd /tmp
wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
popd
sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
sudo apt-get update
sudo apt-get install intel-basekit -y
sudo apt-get install intel-hpckit -y
sudo cmake pkg-config

# add to bash_profile "source /opt/intel/inteloneapi/setvars.sh"

source /opt/intel/inteloneapi/setvars.sh

cat << EOF | sudo tee /etc/apt/sources.list.d/intel-graphics.list
deb [trusted=yes arch=amd64] https://repositories.intel.com/graphics/ubuntu bionic main
EOF
sudo apt-get update && sudo apt-get install -y intel-opencl

sudo usermod -a -G video $USER

# triSYCL

sudo apt-get install doxygen
git clone https://github.com/triSYCL/triSYCL.git

# computeCPP

# DPCPP standalone

#SYCL_HOME=${HOME}/DPCC
#mkdir $SYCL_HOME
#cd $SYCL_HOME
#git clone https://github.com/intel/llvm -b sycl
#mkdir $SYCL_HOME/build
#cd $SYCL_HOME/build

#cmake -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="X86" \
#-DLLVM_EXTERNAL_PROJECTS="llvm-spirv;sycl";opencl-aot \
#-DLLVM_ENABLE_PROJECTS="clang;llvm-spirv;sycl;opencl-aot" \
#-DLLVM_EXTERNAL_SYCL_SOURCE_DIR=$SYCL_HOME/llvm/sycl \
#-DLLVM_EXTERNAL_LLVM_SPIRV_SOURCE_DIR=$SYCL_HOME/llvm/llvm-spirv \
#$SYCL_HOME/llvm/llvm

#make -j 2 sycl-toolchain opencl-aot

#wget https://github.com/intel/compute-runtime/releases/20.05.15524

#git clone https://github.com/intel/tbb.git

# Kokkos

#sudo apt-get install curl
#git clone https://github.com/spack/spack
#source spack/share/spack/setup-env.sh
#spack install kokkos +openmp

git clone https://github.com/kokkos/kokkos Kokkos_build
pushd Kokkos_build
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=${HOME}/Kokkos -DKokkos_ENABLE_OPENMP=On
make install
popd

#export KOKKOS_PATH=${HOME}/Kokkos/Kokkos
export Kokkos_DIR=${HOME}/Kokkos/lib/cmake/Kokkos

# Raja

git clone --recursive https://github.com/llnl/raja.git Raja_build
pushd Raja_build
mkdir build && cd build
cmake ../ -DCMAKE_INSTALL_PREFIX=${HOME}/Raja_Install
make install
popd

export Raja_DIR=${HOME}/Raja/share/raja/cmake

# ====================

# Manually select pull-down menu Devices -> Install Guest additions
# May need to shutdown and restart guest VM

#sudo apt install openjdk-8-jdk
# sudo update-alternatives --config java
# and pick the java-8

# If Software updater prompts, install updated software --> wait ....
